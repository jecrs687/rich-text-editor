{"version":3,"sources":["components/allComponents.js","App.js","serviceWorker.js","index.js"],"names":["Button","children","onClick","value","useState","isSelected","select","style","backgroundColor","Button2","App","text","fontSize","fontWeight","fontStyle","setValue","focus","setFocus","reload","setReload","handleclick","command","props","temp","console","log","className","map","data","index","splice","addText","length","removeText","placeholder","type","onChange","target","write","onFocus","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69c01d26.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { useState } from 'react';\r\n\r\nexport function Button({children, onClick, value}){\r\n    const [isSelected, select]= useState(false) \r\n    \r\n    return(\r\n        <button \r\n        style={{backgroundColor:isSelected? '#bbb': '#eee'}} \r\n        onClick={()=>{onClick(children);select(!isSelected)}} >\r\n          {children}\r\n        </button>\r\n      )\r\n  }\r\nexport function Button2({children, onClick}){\r\n    return(\r\n        <button  \r\n        style={{backgroundColor: '#eee'}} \r\n  \r\n        onClick={()=>{onClick(children);}} >\r\n          {children}\r\n        </button>\r\n      )\r\n  }\r\n  \r\nexport function Text({value, write,key, focus}){\r\n    const {style, text} = value\r\n    function changeText({target}){\r\n        write({value:target})\r\n    }    \r\n    return(\r\n      <input style={{...style}} className=\"App-box\" type=\"text\" value={text} onChange={(target)=>{changeText(target)}} />  )\r\n  }","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport {Button, Button2} from './components/allComponents'\n\n\nfunction App() {\n  const [value, setValue] = useState([\n  {\"text\": '',\n  \"style\":{\n    fontSize:14,\n    fontWeight:'300',\n    fontStyle:'normal'\n  }},\n])\n  const [focus, setFocus] = useState(-1)\n  // const [selecteds, setSelects]= useState([]) \n  const [reload, setReload] = useState(true)\n  var text;\n  function handleclick(command){\n    command = command.props? command.props.children:command;\n    var temp=value;\n    console.log({...temp[focus].style})\n    console.log(command)\n    switch(command){\n      case 'i':\n        if(temp[focus].style.fontStyle==='normal'){\n          temp[focus].style.fontStyle='italic'\n          setValue(temp)\n        }else{\n          temp[focus].style.fontStyle='normal'\n          setValue(temp)\n        }\n        break;\n      case \"size+\":\n        temp[focus].style.fontSize=temp[focus].style.fontSize+1\n        setValue(temp)\n        break;\n      case \"size-\":\n        temp[focus].style.fontSize=temp[focus].style.fontSize-1\n        setValue(temp)\n        break;\n      case \"n\":\n        if(temp[focus].style.fontWeight==='300'){\n          temp[focus].style.fontWeight='900'\n          setValue(temp)\n        }\n        else{temp[focus].style.fontWeight='300'\n        setValue(temp)\n      }\n        break;\n      default:\n        break\n      }\n      setReload(!reload)\n    // if(selecteds.indexOf(value)===-1){\n    //   setSelects([...selecteds,value])\n    // }else{\n    //   temp = selecteds;\n    //   temp.splice(selecteds.indexOf(value),1);\n    //   setSelects(temp)\n    // }\n    // console.log(selecteds)\n  }\n\n  function write({target}){\n    text = target.value\n    console.log(text)\n    var temp = value\n    temp[focus].text = target.value\n    setValue(temp)\n    setReload(!reload)\n\n  }\n  \n  function addText(){\n    var temp = value;\n    temp.splice(focus+1, 0,   \n      {\"text\": '',\n    \"style\":{\n      fontSize:14,\n      fontWeight:'300',\n      fontStyle:'normal'\n    }})\n    setValue(temp)\n    setReload(!reload)\n\n  }\n  function removeText(){\n    var temp = value;\n    temp.splice(focus,1)\n    setValue(temp)\n    setReload(!reload)\n\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"App-head\">\n        <div className=\"App-head-box\">\n\n          <Button value={value[focus]} onClick={handleclick}><strong>n</strong></Button>\n          <Button value={value[focus]} onClick={handleclick}><i>i</i></Button>\n          <Button2 onClick={handleclick}>size+</Button2>\n          <Button2 onClick={handleclick}>size-</Button2>\n        </div>\n        {value[focus]?\n        <div className=\"App-head-box\">\n        <h4>fontSize: {value[focus].style.fontSize} | fontStyle: {value[focus].style.fontStyle} | fontWeight: {value[focus].style.fontWeight}</h4>\n         </div>:null}\n      </div>\n      <div className=\"App-body\"> \n          {\n          value.map((data,index)=>(\n            <div className=\"App-body-box\">\n              {index===focus?\n            <button  className=\"Button\" onClick={()=>{addText()}}>+</button>:<div className=\"Button\"/>}\n            {index===focus && value.length>1?\n            <button  className=\"Button\" onClick={()=>{removeText()}}>-</button>:<div className=\"Button\"/>}\n            <textarea placeholder=\"write here\" style={{...data.style}} className=\"App-box\" type=\"text\" value={data.text} onChange={(target)=>{write(target)}} onFocus={()=>{setFocus(index)}} /> \n            </div>\n            ))\n            }\n        </div>\n      <div className=\"App-footer\">\n        this is an open-source project by: \n        <a href=\"https://jecrs687.github.io/\"> @jecrs687</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}