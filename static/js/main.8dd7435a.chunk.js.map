{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","children","onClick","useState","isSelected","select","style","backgroundColor","Button2","Text","text","App","value","setValue","reload","setReload","fontSize","fontWeight","fontStyle","setStyle","handleclick","props","temp","console","log","className","type","onChange","target","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAIA,SAASA,EAAT,GAAqC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,QAAS,EACNC,oBAAS,GADH,mBAC3BC,EAD2B,KACfC,EADe,KAElC,OACI,4BACAC,MAAO,CAACC,gBAAgBH,EAAY,OAAQ,QAC5CF,QAAS,WAAKA,EAAQD,GAAUI,GAAQD,KACrCH,GAIT,SAASO,EAAT,GAAsC,IAApBP,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,QAC1B,OACI,4BACAI,MAAO,CAACC,gBAAiB,QAEzBL,QAAS,WAAKA,EAAQD,KACnBA,GAKT,SAASQ,EAAT,GAAsB,IAAPC,EAAM,EAANA,KAEb,OACE,2BAAIA,GA2FOC,MAvFf,WAAgB,IASVD,EATS,EACaP,mBAAS,IADtB,mBACNS,EADM,KACCC,EADD,OAGeV,oBAAS,GAHxB,mBAGNW,EAHM,KAGEC,EAHF,OAIaZ,mBAAS,CACjCa,SAAS,GACTC,WAAW,MACXC,UAAU,WAPC,mBAINZ,EAJM,KAICa,EAJD,KAUb,SAASC,EAAYR,GACnBA,EAAQA,EAAMS,MAAOT,EAAMS,MAAMpB,SAASW,EAC1C,IAAIU,EAAKhB,EAGT,OAFAiB,QAAQC,IAAR,eAAgBlB,IAChBiB,QAAQC,IAAIZ,GACLA,GACL,IAAK,IACiB,WAAjBU,EAAKJ,WACNI,EAAKJ,UAAU,SACfC,EAASG,KAEVA,EAAKJ,UAAU,SACdC,EAASG,IAEX,MACF,IAAK,QACHA,EAAKN,SAASM,EAAKN,SAAS,EAC5BG,EAASG,GACT,MACF,IAAK,QACHA,EAAKN,SAASM,EAAKN,SAAS,EAC5BG,EAASG,GACT,MACF,IAAK,IACkB,QAAlBA,EAAKL,YACPK,EAAKL,WAAW,MACfE,EAASG,KACNA,EAAKL,WAAW,MACnBE,EAASG,IAKbP,GAAWD,GAef,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBAEb,kBAACzB,EAAD,CAAQE,QAASkB,GAAa,sCAC9B,kBAACpB,EAAD,CAAQE,QAASkB,GAAa,iCAC9B,kBAACZ,EAAD,CAASN,QAASkB,GAAlB,SACA,kBAACZ,EAAD,CAASN,QAASkB,GAAlB,UAEF,yBAAKK,UAAU,gBACb,yCAAenB,EAAMU,SAArB,iBAA6CV,EAAMY,UAAnD,kBAA6EZ,EAAMW,cAIvF,yBAAKQ,UAAU,YACb,8BAAUnB,MAAK,eAAMA,GAAQmB,UAAU,UAAWC,KAAK,OAAOd,MAAOA,EAAOe,SArBlF,YAAyB,IAATC,EAAQ,EAARA,OACdlB,EAAOkB,EAAOhB,MACdC,EAASe,EAAOhB,UAoBZ,yBAAKa,UAAU,WACb,kBAAChB,EAAD,CAAMC,KAAMA,MAGhB,yBAAKe,UAAU,cAAf,qCAEE,uBAAGI,KAAK,+BAAR,iBCrGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8dd7435a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction Button({children, onClick}){\n  const [isSelected, select]= useState(false) \n  return(\n      <button \n      style={{backgroundColor:isSelected? '#bbb': '#eee'}} \n      onClick={()=>{onClick(children);select(!isSelected)}} >\n        {children}\n      </button>\n    )\n}\nfunction Button2({children, onClick}){\n  return(\n      <button  \n      style={{backgroundColor: '#eee'}} \n\n      onClick={()=>{onClick(children);}} >\n        {children}\n      </button>\n    )\n}\n\nfunction Text({text}){\n\n  return(\n    <p>{text}</p>\n  )\n}\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n  // const [selecteds, setSelects]= useState([]) \n  const [reload, setReload] = useState(true)\n  const [style, setStyle] = useState({\n    fontSize:14,\n    fontWeight:'300',\n    fontStyle:'normal'\n  })\n  var text;\n  function handleclick(value){\n    value = value.props? value.props.children:value;\n    var temp=style;\n    console.log({...style})\n    console.log(value)\n    switch(value){\n      case 'i':\n        if(temp.fontStyle==='normal'){\n          temp.fontStyle='italic'\n          setStyle(temp)\n        }else{\n         temp.fontStyle='normal'\n          setStyle(temp)\n        }\n        break;\n      case \"size+\":\n        temp.fontSize=temp.fontSize+1\n        setStyle(temp)\n        break;\n      case \"size-\":\n        temp.fontSize=temp.fontSize-1\n        setStyle(temp)\n        break;\n      case \"n\":\n        if(temp.fontWeight==='300'){\n         temp.fontWeight='900'\n          setStyle(temp)}\n        else{temp.fontWeight='300'\n          setStyle(temp)}\n        break;\n      default:\n        break\n      }\n      setReload(!reload)\n    // if(selecteds.indexOf(value)===-1){\n    //   setSelects([...selecteds,value])\n    // }else{\n    //   temp = selecteds;\n    //   temp.splice(selecteds.indexOf(value),1);\n    //   setSelects(temp)\n    // }\n    // console.log(selecteds)\n  }\n  function write({target}){\n    text = target.value\n    setValue(target.value)\n\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"App-head\">\n        <div className=\"App-head-box\">\n\n          <Button onClick={handleclick}><strong>n</strong></Button>\n          <Button onClick={handleclick}><i>i</i></Button>\n          <Button2 onClick={handleclick}>size+</Button2>\n          <Button2 onClick={handleclick}>size-</Button2>\n        </div>\n        <div className=\"App-head-box\">\n          <h4>fontSize: {style.fontSize} | fontStyle: {style.fontStyle} | fontWeight: {style.fontWeight}</h4>\n\n         </div>\n      </div>\n      <div className=\"App-body\"> \n        <textarea style={{...style}} className=\"App-box\"  type=\"text\" value={value} onChange={write} />\n        <div className='App-box'>\n          <Text text={text}/>\n        </div>\n      </div>\n      <div className=\"App-footer\">\n        this is an open-source project by: \n        <a href=\"https://jecrs687.github.io/\"> @jecrs687</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}