{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","setText","boxText","useRef","textDiv","setTextDiv","selected","setSelected","document","onselectionchange","start","getSelection","anchorOffset","extentOffset","end","useEffect","split","className","onClick","temp","slice","length","contentEditable","ref","suppressContentEditableWarning","children","onInput","value","currentTarget","textContent","console","log","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQA8DeA,MA3Df,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACNC,EADM,KACAC,EADA,KAEPC,EAAyBC,mBAFlB,EAGkBJ,mBAAS,IAH3B,mBAGNK,EAHM,KAGGC,EAHH,OAKmBN,mBAAS,CACrC,MAAS,EACT,IAAS,IAPA,mBAKNO,EALM,KAKIC,EALJ,KA0Bb,OAhBAC,SAASC,kBAAoB,WAE5B,IAAIC,EAAQF,SAASG,eAAeC,aAAeJ,SAASG,eAAeE,aAAa,EAAEL,SAASG,eAAeE,aAAaL,SAASG,eAAeC,aACnJE,EAAQN,SAASG,eAAeE,aAAeL,SAASG,eAAeC,aAAa,EAAEJ,SAASG,eAAeE,aAAaL,SAASG,eAAeC,aAEtJL,EAAY,CACV,MAAQG,EACR,IAAQI,KAIVC,qBAAU,WACRf,EAAKgB,MAAM,eACX,CAAChB,IAIH,yBAAKiB,UAAU,OACb,6BACE,4BAAQC,QACN,WAEE,IAAIC,EAAOf,EAAQgB,MAAM,EAAGd,EAASI,OAAQ,YAAcN,EAAQgB,MAAMd,EAASI,MAAOJ,EAASQ,KAAO,YAAeV,EAAQgB,MAAMd,EAASQ,IAAKV,EAAQiB,QAC5JpB,EAAQkB,KAEV,sCACM,4BAAQD,QACd,WACE,IAAIC,EAAOf,EAAQgB,MAAM,EAAGd,EAASI,OAAQ,YAAcN,EAAQgB,MAAMd,EAASI,MAAOJ,EAASQ,KAAO,YAAeV,EAAQgB,MAAMd,EAASQ,IAAKV,EAAQiB,QAC5JpB,EAAQkB,KAEV,kCAEJ,yBACAF,UAAU,WACVK,iBAAe,EACfC,IAAKrB,EACLsB,gCAAgC,EAChCC,SAAUzB,EACV0B,QAAS,SAACC,GAAStB,EAAWsB,EAAMC,cAAcC,gBAElD,4BAAQX,QAAS,WAAKY,QAAQC,QAA9B,gBC1CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7de798c1.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [text, setText]        = useState('');\r\n  const boxText                = useRef()\r\n  const [textDiv, setTextDiv]  = useState('');\r\n\r\n  const [selected, setSelected] = useState({\r\n      \"start\": 0,\r\n      \"end\"  : 0\r\n  })\r\n\r\n  document.onselectionchange = () => {\r\n\r\n   var start = document.getSelection().anchorOffset - document.getSelection().extentOffset>0?document.getSelection().extentOffset:document.getSelection().anchorOffset\r\n   var end   = document.getSelection().extentOffset - document.getSelection().anchorOffset>0?document.getSelection().extentOffset:document.getSelection().anchorOffset\r\n\r\n    setSelected({\r\n      \"start\":start,\r\n      \"end\"  :end,\r\n\r\n    })  };\r\n\r\n    useEffect(()=>{\r\n      text.split('  *.&**  ');\r\n    },[text])\r\n\r\n// main code\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button onClick={\r\n          ()=>{\r\n            \r\n            var temp = textDiv.slice(0, selected.start)+ '  *.&**  ' + textDiv.slice(selected.start, selected.end) + '  *.&**  ' +  textDiv.slice(selected.end, textDiv.length);\r\n            setText(temp)\r\n          }\r\n        }><strong>N</strong></button>\r\n                <button onClick={\r\n          ()=>{\r\n            var temp = textDiv.slice(0, selected.start)+ '  *.&||  ' + textDiv.slice(selected.start, selected.end) + '  *.&||  ' +  textDiv.slice(selected.end, textDiv.length);\r\n            setText(temp)\r\n          }\r\n        }><i>I</i></button>\r\n      </div>\r\n      <div\r\n      className='box-text'\r\n      contentEditable\r\n      ref={boxText}\r\n      suppressContentEditableWarning={true}\r\n      children={text}\r\n      onInput={(value)=>{setTextDiv(value.currentTarget.textContent)}}\r\n        />       \r\n      <button onClick={()=>{console.log()}}>teste ....</button>\r\n    </div>\r\n  );\r\n// end main code\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}